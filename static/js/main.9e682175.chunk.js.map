{"version":3,"sources":["AnotherTable.js","App.js","serviceWorker.js","index.js"],"names":["options","value","label","options1","AnotherTable","props","onSearchInput","event","preventDefault","setState","search","target","console","log","onFormSumit","items","state","id","firstname","lastname","push","alert","onChangeInput","name","className","type","placeholder","this","onChange","Row","Col","md","FormGroup","Label","classNamePrefix","Form","onSubmit","Button","Table","bordered","color","style","backgroundColor","scope","map","item","key","React","Component","App","searchString","posts","axios","get","then","res","data","newPost","trim","toLowerCase","length","filter","user","title","match","body","columns","Header","accessor","width","minWidth","maxWidth","filterable","sortable","defaultPageSize","pageSizeOptions","noDataText","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e682175.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./AnotherTable.css\";\r\nimport Select from \"react-select\";\r\nimport { Form,\r\n         Table,\r\n         Button,\r\n         Label,\r\n         FormGroup,\r\n         Row,\r\n         Col\r\n        } \r\n    from 'reactstrap';\r\nconst options = [\r\n  { value: 'Virendra', label: 'Virendra'},\r\n  { value: 'Ankit',label:'Ankit'},\r\n  { value: 'Deepu', label: 'Deepu'}\r\n]\r\n\r\nconst options1 = [\r\n  { value: 'Singh', label: 'Singh'},\r\n  { value: 'Vats',label:'Vats'},\r\n  { value: 'Thakur', label: 'Thakur'}\r\n]\r\nclass AnotherTable extends React.Component {\r\n   constructor(props) {\r\n       super(props);\r\n       this.state = {\r\n           id:3 ,\r\n           firstname:\"\",\r\n           lastname:\"\",\r\n           items:[],\r\n           search:\"\"\r\n       }\r\n   }\r\n\r\n\r\nonSearchInput = (event) => {\r\n  event.preventDefault();\r\n  this.setState({search:event.target.value});\r\n  console.log(event.target.value);\r\n}\r\n\r\nonFormSumit = (event) => {\r\n    event.preventDefault();\r\n    let items = [...this.state.items];\r\n if ((this.state.id) && (this.state.firstname) && (this.state.lastname) !==\"\") {\r\n    \r\n    items.push({\r\n      id:this.state.id,\r\n      firstname: this.state.firstname,\r\n      lastname: this.state.lastname\r\n    });\r\n\r\n    this.setState({\r\n      items,\r\n      id:(this.state.id) + 1,\r\n      firstname: '',\r\n      lastname: ''\r\n    });\r\n } \r\n else {\r\nalert(\"Please Fill All \");\r\n }\r\n}\r\nonChangeInput = (event) => {\r\n    this.setState({[event.target.name]:event.target.value})\r\n}\r\nrender() {\r\n/*let filteredData = this.state.items.filter(\r\n  (e) => {\r\n    return  (e.firstname.toLowerCase().indexOf(this.state.search.toLowerCase())) ||  (e.lastname.indexOf(this.state.search.toLowerCase())) !==-1\r\n  }\r\n)*/\r\nreturn (\r\n<div className=\"container-fluid\">\r\n<div>\r\n<input type=\"text\" className=\"form-control w-50 text-dark\" placeholder=\"Search here....\" name=\"search\" \r\n        value={this.state.search} onChange={this.onSearchInput} />\r\n</div>\r\n<Row className=\"mb-3 mt-3\">\r\n            <Col md={3}>\r\n              <FormGroup>\r\n                <Label>Firstname</Label>\r\n                <Select\r\n                   options={options}\r\n                  // value = {options.value}\r\n                   classNamePrefix=\"Select\"\r\n                   placeholder=\"Select ....\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={3}>\r\n              <FormGroup>\r\n                <Label>Lastname</Label>\r\n                <Select\r\n                   options={options1}\r\n                   classNamePrefix=\"Select\"\r\n                   placeholder=\"Select ....\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n     </Row>\r\n<Form onSubmit={this.onFormSumit}/*className=\"form-inline mt-2 mb-2\"*/>\r\n      \r\n       <div className=\"row mt-2 mb-2\">\r\n        <div className=\"col\">\r\n        <input type=\"text\" className=\"form-control text-dark\" placeholder=\"Enter First Name\" name=\"firstname\" \r\n        value={this.state.firstname} onChange={this.onChangeInput} />\r\n        </div>\r\n        <div className=\"col\">\r\n        <input type=\"text\" className=\"form-control text-dark \" placeholder=\"Enter Last Name\" name=\"lastname\" \r\n        value={this.state.lastname} onChange={this.onChangeInput}/>\r\n        </div>\r\n        <div className=\"col text-left\">\r\n        <Button>Click Here to Add in Table</Button>\r\n        </div>\r\n       </div>\r\n</Form>    \r\n<Table bordered className=\" text-center tabless\">\r\n      <thead color=\"primary\" style = {{backgroundColor:\"darkcyan\",color:\"floralwhite\"}} className=\"\">\r\n        <tr>\r\n          <th>Id</th>\r\n          <th>First Name</th>\r\n          <th>Last Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <th scope=\"row\">1</th>\r\n          <td>Virendra </td>\r\n          <td>Singh</td>\r\n        </tr>\r\n        <tr>\r\n          <th scope=\"row\">2</th>\r\n          <td>Ankit</td>\r\n          <td>Vats</td>\r\n        </tr>                     \r\n        {this.state.items.map(item => {\r\n              return (\r\n                <tr key={item.id}>\r\n                  <th scope=\"row\">{item.id}</th>\r\n                  <td>{item.firstname}</td>\r\n                  <td>{item.lastname}</td>\r\n                </tr>\r\n              );\r\n        })\r\n        }\r\n      </tbody>\r\n    </Table>\r\n    </div>\r\n  );\r\n}\r\n}\r\nexport default AnotherTable;","import React from 'react';\nimport './App.css';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport Select from \"react-select\";\nimport axios from \"axios\";\n import {\n   Button,\n   Form,\n   Card,\n   Row,\n   FormGroup, \n   Label,\n   Input,\n   Col\n }  from \"reactstrap\";\nimport AnotherTable from './AnotherTable';\n\nconst options = [\n  { value: 'title', label: 'Title' }\n \n];\nconst options1 = [\n   { value: 'body', label: 'Content' }\n \n];\n\nclass App extends React.Component {\n  constructor () {\n    super();\n    this.state = {\n      posts:[],\n      //id:101,\n     // title:\"\",\n     // body:\"\",\n      //filteredData: [],\n      searchString: \"\",\n     // searching:\"\"\n    }\n  }\n  componentDidMount () {\n \n    axios.get(\"https://jsonplaceholder.typicode.com/posts\")\n    .then(res => {\n    // const posts = res.data;\n      this.setState({ posts: res.data\n       });\n      \n    })\n  }\n\n/*onFilterChange = (event) => {\n  this.setState({[event.target.name]:event.target.value})\n  console.log(event.target.value);\n}*/\n\n\n\n onFormSumit = (event) => {\n    event.preventDefault();\n   \n }\n\n onChangeInput = (event) => {\n  this.setState({searchString:event.target.value});\n }\n\n /*onChangeInput = (event) => {\n   this.setState({searchString:this.refs.Search.value});\n   this.refs.Search.focus();\n }\n onChangeInput = (event) => {\n   \n  this.setState({searchInput:event.target.value}, () =>\n  this.globalSearch());\n  console.log(event.target.value)\n\n}\n  globalSearch = () => {\n    let { searchInput ,posts} = this.state;\n  \n    let filteredData = posts.filter(value => {\n      return (\n        value.title.toLowerCase().includes(searchInput.toLowerCase()) ||\n        value.body.toLowerCase().includes(searchInput.toLowerCase())\n        //const val =  (filteredData.length > 0 && filteredData) || searchInput ? filteredData : this.state.posts \n                 \n      );\n    });\n  \n    this.setState({ posts : filteredData });\n  \n  };*/\n  render() {\n    let {searchString ,posts} = this.state;\n    let newPost = posts;\n    let search = searchString.trim().toLowerCase();\n\n    if (search.length > 0) {\n      newPost = newPost.filter((user) => {\n        return user.title.toLowerCase().match(search) || user.body.toLowerCase().match(search);\n      });\n    }\n    const columns = [{  \n      Header: 'Id',  \n      accessor: 'id',\n      width: 100,\n      minWidth:100 ,\n      maxWidth:100 ,\n      filterable:false\n      },\n      {  \n      Header: 'Title',  \n      accessor: 'title',\n      sortable : false, \n      //filterable: true\n      },\n      {  \n      Header: 'Content',  \n      accessor: 'body',\n      sortable: false ,\n      //filterable: true\n        }]\n    \n       \n  \n\n\n\n  return (\n    <div>\n    <AnotherTable  />\n   \n    <div className = \"container-fluid react-classes\">\n    <Row>\n    <Col md={3}>\n    <Form  onSubmit={this.onFormSumit}>\n        <input type=\"text\" className=\"form-control  mt-3 mb-4 text-dark\"  value={searchString}  placeholder=\"Search Here\" onChange={this.onChangeInput} />\n     </Form>\n     </Col>\n    </Row>\n    \n    \n    <Row className=\"mb-3\">\n            <Col md={3}>\n              <FormGroup>\n                <Label>Title</Label>\n                <Select\n                   options={options}\n                   value = {options.value}\n                   classNamePrefix=\"Select\"\n                   placeholder=\"Select ....\"\n                />\n              </FormGroup>\n            </Col>\n            <Col md={3}>\n              <FormGroup>\n                <Label>Content</Label>\n                <Select\n                   options={options1}\n                   classNamePrefix=\"Select\"\n                   placeholder=\"Select ....\"\n                />\n              </FormGroup>\n            </Col>\n     </Row>\n     \n     <ReactTable className=\"\"\n                \n                columns = {columns}        \n                data = { /*filteredData.length > 0  ? filteredData : posts*/newPost}\n                defaultPageSize = {10}  \n                pageSizeOptions = {[10,20]}\n                noDataText = \"No Data Found\"\n                //filterable\n              \n     />\n\n    </div>\n    </div>             \n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import AnotherTable from \"./AnotherTable\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}