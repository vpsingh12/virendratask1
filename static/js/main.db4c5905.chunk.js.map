{"version":3,"sources":["AnotherTable.js","App.js","serviceWorker.js","index.js"],"names":["AnotherTable","props","onFormSumit","event","preventDefault","items","state","id","firstname","lastname","push","setState","alert","onChangeInput","target","name","value","Card","className","Form","onSubmit","this","type","placeholder","onChange","Button","Table","bordered","color","style","backgroundColor","scope","map","item","key","React","Component","App","body","title","querySelector","posts","axios","get","then","res","console","log","data","columns","Header","accessor","width","minWidth","maxWidth","sortable","defaultPageSize","pageSizeOptions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db4c5905.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./AnotherTable.css\";\r\nimport { Form,\r\n         Table,\r\n         Button,\r\n         Card\r\n        } \r\n    from 'reactstrap';\r\n\r\nclass AnotherTable extends React.Component {\r\n   constructor(props) {\r\n       super(props);\r\n       this.state = {\r\n           id:3 ,\r\n           firstname:\"\",\r\n           lastname:\"\",\r\n           items:[]\r\n       }\r\n   }\r\n\r\n\r\n\r\n\r\nonFormSumit = (event) => {\r\n    event.preventDefault();\r\n    let items = [...this.state.items];\r\n if ((this.state.id) && (this.state.firstname) && (this.state.lastname) !==\"\") {\r\n    \r\n    items.push({\r\n      id:this.state.id,\r\n      firstname: this.state.firstname,\r\n      lastname: this.state.lastname\r\n    });\r\n\r\n    this.setState({\r\n      items,\r\n      id:(this.state.id) + 1,\r\n      firstname: '',\r\n      lastname: ''\r\n    });\r\n } \r\n else {\r\nalert(\"Please Fill All \");\r\n }\r\n}\r\nonChangeInput = (event) => {\r\n    this.setState({[event.target.name]:event.target.value})\r\n}\r\nrender() {\r\n\r\nreturn (\r\n<Card>\r\n<div className=\"container-fluid\">\r\n<Form onSubmit={this.onFormSumit}/*className=\"form-inline mt-2 mb-2\"*/>\r\n      \r\n       <div className=\"row mt-2 mb-2\">\r\n        <div className=\"col\">\r\n        <input type=\"text\" className=\"form-control text-dark\" placeholder=\"Enter First Name\" name=\"firstname\" \r\n        value={this.state.firstname} onChange={this.onChangeInput} />\r\n        </div>\r\n        <div className=\"col\">\r\n        <input type=\"text\" className=\"form-control text-dark \" placeholder=\"Enter Last Name\" name=\"lastname\" \r\n        value={this.state.lastname} onChange={this.onChangeInput}/>\r\n        </div>\r\n        <div className=\"col text-left\">\r\n        <Button>Click Here to Add in Table</Button>\r\n        </div>\r\n       </div>\r\n</Form>    \r\n<Table bordered className=\" text-center tabless\">\r\n      <thead color=\"primary\" style = {{backgroundColor:\"darkcyan\",color:\"floralwhite\"}}className=\"\">\r\n        <tr>\r\n          <th>Id</th>\r\n          <th>First Name</th>\r\n          <th>Last Name</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <th scope=\"row\">1</th>\r\n          <td>Virendra </td>\r\n          <td>Singh</td>\r\n        </tr>\r\n        <tr>\r\n          <th scope=\"row\">2</th>\r\n          <td>Ankit</td>\r\n          <td>Vats</td>\r\n        </tr>                     \r\n        {this.state.items.map(item => {\r\n              return (\r\n                <tr key={item.id}>\r\n                  <th scope=\"row\">{item.id}</th>\r\n                  <td>{item.firstname}</td>\r\n                  <td>{item.lastname}</td>\r\n                </tr>\r\n              );\r\n        })\r\n        }\r\n      </tbody>\r\n    </Table>\r\n    </div>\r\n    </Card>\r\n  );\r\n}\r\n}\r\nexport default AnotherTable;","import React from 'react';\nimport './App.css';\nimport ReactTable from \"react-table\";\nimport \"react-table/react-table.css\";\nimport axios from \"axios\";\n import {\n   Button,\n   Form,\n   Card\n }  from \"reactstrap\";\nimport AnotherTable from './AnotherTable';\n\n\nclass App extends React.Component {\n  constructor () {\n    super();\n    this.state = {\n      posts:[],\n      id:101,\n      title:\"\",\n      body:\"\"\n    }\n  }\n onChangeInput = (event) => {\n   \n   this.setState({[event.target.name]:event.target.value})\n }\n\n onFormSumit = (event) => {\n    event.preventDefault();\n    if(((this.state.body)&& (this.state.title)) !=\"\") {\n    this.setState({id:this.state.id + 1})\n    }\n    const firstName = event.target.querySelector(\"input[name='title']\").value;\n const lastName = event.target.querySelector(\"input[name='body']\").value;\n }\n  //componentWillMount () {\n    //localStorage.getItem(\"posts\") && this.setState({\n      //posts:JSON.parse(localStorage.getItem(\"posts\"))\n    //})\n // }\n  componentDidMount () {\n  //const val =  localStorage.setItem(\"posts\",JSON.stringify(posts));\n  //console (val);\n    //if (!localStorage.getItem(\"posts\")) {\n      axios.get(\"https://jsonplaceholder.typicode.com/posts\")\n      .then(res => {\n       // const posts = res.data;\n       console.log(res.data)\n        this.setState({ posts:res.data\n         });\n        \n      })\n    //const val = localStorage.setItem(\"post\",JSON.stringify(posts));\n    //const val1 = localStorage.getItem(\"posts\") && this.setState({\n     // posts:JSON.parse(localStorage.getItem(\"posts\"))\n   // })\n   // var posts;\n    //localStorage.setItem( 'posts', JSON.stringify(posts) );\n    //console.log( JSON.parse( localStorage.getItem( 'posts' ) ) );\n    }// else {\n     // console.log(\"using data from local storage\");\n    //}\n    \n  \n\n  //componentWillUpdate (nextProp , nextState) {\n    //localStorage.setItem(\"posts\",JSON.stringify(nextState.posts));\n  //}\n  render() {\n    const columns = [{  \n      Header: 'Id',  \n      accessor: 'id',\n      width: 100,\n      minWidth:100 ,\n      maxWidth:100 ,\n      //filterable:true\n      },\n      {  \n      Header: 'Title',  \n      accessor: 'title',\n      sortable : false ,\n      //filterable: true\n      },\n      {  \n      Header: 'Content',  \n      accessor: 'body',\n      sortable: false ,\n      //filterable: true\n        }]\n    \n        \n  return (\n    <div>\n    <AnotherTable       />\n    <div className = \"container-fluid react-classes\">\n  \n     <ReactTable className=\"\"\n                columns = {columns}\n                data = {this.state.posts}\n                defaultPageSize = {10}  \n                pageSizeOptions = {[10,20]}\n              \n     />\n\n    </div>\n    </div>             \n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import AnotherTable from \"./AnotherTable\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}