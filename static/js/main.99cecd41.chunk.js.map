{"version":3,"sources":["Modaler.js","GivenTask.js","serviceWorker.js","index.js"],"names":["Modaler","props","toggle","e","setState","showModal","state","console","log","onInputChange","event","target","name","value","onSubmitModel","preventDefault","firstname","lastname","email","contact","Button","className","color","onClick","this","Modal","isOpen","ModalHeader","ModalBody","Row","Col","md","FormGroup","Label","type","placeholder","onChange","ModalFooter","onSubmit","React","Component","GivenTask","show","Card","columns","Header","accessor","sortable","noDataText","defaultPageSize","showPagination","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.99cecd41.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row,\r\n  Col,\r\n  FormGroup,\r\n  Label\r\n} from \"reactstrap\";\r\nimport \"./Modaler.css\";\r\n\r\nclass Modaler extends React.Component {\r\n    constructor(props) {\r\n       super(props);\r\n       this.state={\r\n           //show:false,\r\n           showModal: false ,\r\n           firstname:\"\",\r\n           lastname:\"\",\r\n           email:\"\",\r\n           contact:\"\"   \r\n          }\r\n    }\r\n\r\n toggle = (e) => {\r\n     this.setState({showModal:!this.state.showModal})\r\n     console.log(e)\r\n }\r\nonInputChange = (event) => {\r\n  this.setState({[event.target.name]:event.target.value})\r\n  console.log(event.target.value)\r\n}\r\nonSubmitModel = (event) => {\r\n  event.preventDefault();\r\n}\r\n    render() {\r\n\r\n        return (\r\n        <div>\r\n          <Button className=\"mt-3 ml-5\" color=\"danger\" onClick={this.toggle}>Add here</Button>\r\n          <Modal isOpen={this.state.showModal} toggle={this.toggle}  className=\"my-class\" \r\n          >\r\n            <ModalHeader toggle={this.toggle}>Add Authorised Personnel</ModalHeader>\r\n            <ModalBody>\r\n              <Row className=\"mb-3\">\r\n                 <Col md={6}>\r\n                     <FormGroup>\r\n                      <Label>First Name</Label>\r\n                       <input type=\"text\" className=\"form-control text-dark\" placeholder=\"Enter First Name\" name=\"firstname\" \r\n                        value={this.state.firstname} onChange={this.onInputChange}\r\n                      />\r\n                     </FormGroup>\r\n                  </Col>\r\n                 <Col md={6}>     \r\n                     <FormGroup>\r\n                      <Label>Last Name</Label>\r\n                      <input type=\"text\" className=\"form-control text-dark \" placeholder=\"Enter Last Name\" name=\"lastname\" \r\n                       value={this.state.lastname} onChange={this.onInputChange}\r\n                       />\r\n                     </FormGroup>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                     <FormGroup>\r\n                      <Label>Email Address</Label>\r\n                      <input type=\"email\" className=\"form-control text-dark \" placeholder=\"Enter Email\" name=\"email\"\r\n                       value={this.state.email} onChange={this.onInputChange}\r\n                       />\r\n                     </FormGroup>\r\n                  </Col>\r\n                  <Col md={6}>\r\n                     <FormGroup>\r\n                      <Label>Contact No</Label>\r\n                      <input type=\"number\" className=\"form-control text-dark \" placeholder=\"Enter Contact No\" name=\"contact\" \r\n                       value={this.state.email} onChange={this.onInputChange}\r\n                      />\r\n                     </FormGroup>\r\n                  </Col>\r\n               </Row>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onSubmit={this.onSubmitModel}>Submit</Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n export default Modaler;","import React from \"react\";\r\nimport \"./GivenTask.css\";\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\"; \r\nimport Modaler from \"./Modaler.js\";\r\nimport {\r\n    Button,\r\n    Form,\r\n    Card,\r\n    Row,\r\n    FormGroup, \r\n    Label,\r\n    Input,\r\n    Col,\r\n    Table\r\n    \r\n  }  from \"reactstrap\";\r\n\r\n\r\n\r\nclass GivenTask extends React.Component {\r\n    constructor(props) {\r\n       super(props);\r\n       this.state = {\r\n           show:false\r\n       }\r\n    }\r\n\r\n render () {\r\n    const columns = [{  \r\n        Header: 'FirstName',  \r\n        accessor: 'firstname',\r\n        \r\n        },\r\n        {  \r\n        Header: 'LastName',  \r\n        accessor: 'lastname',\r\n        sortable : false,\r\n        //filterable: true\r\n        },\r\n        {  \r\n        Header: 'Email',  \r\n        accessor: 'email',\r\n        sortable: false ,\r\n        //filterable: true\r\n       },\r\n       {  \r\n        Header: 'Contacts',  \r\n        accessor: 'contacts',\r\n        sortable: false ,\r\n        //filterable: true\r\n       },\r\n       {  \r\n        Header: 'Actions',  \r\n        accessor: 'actions',\r\n        sortable: false ,\r\n        //filterable: true\r\n       }\r\n    ]\r\n     return (\r\n     <div>\r\n       <h3 className=\"ml-5 my-5 text-primary\">Authorised Personnel Detail</h3>\r\n       <Card>\r\n         <ReactTable  className=\"m-5\"\r\n                   columns={columns}\r\n                   noDataText = {\"No Authorised Personnel !!\"}\r\n                   defaultPageSize = {8}\r\n                   showPagination={false}\r\n         />\r\n       </Card>\r\n       <Modaler className=\"mt-3 ml-5\"/> \r\n     </div>\r\n     )\r\n }\r\n}\r\nexport default GivenTask;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GivenTask from \"./GivenTask.js\"\n//import App from './App';\n//import AnotherTable from \"./AnotherTable\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <GivenTask />\n    \n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}